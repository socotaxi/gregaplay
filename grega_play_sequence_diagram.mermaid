sequenceDiagram
    %% 1. Création d'un événement et invitation des participants
    participant Client
    participant ReactApp as React/Vite App
    participant SupaAuth as Supabase Auth
    participant SupaDB as Supabase Database
    participant SupaStorage as Supabase Storage
    participant EdgeFunc as Edge Function
    participant FFmpegAPI as FFmpeg API Externe
    participant Organizer as Organisateur
    participant Participant
    participant MediaRec as MediaRecorder API
    participant System as Système Auto
    
    %% Flux 1: Création d'un événement
    Client->>ReactApp: Accède à /dashboard
    ReactApp->>SupaAuth: Vérifie l'authentification
    SupaAuth-->>ReactApp: Session utilisateur
    ReactApp-->>Client: Affiche le dashboard
    Client->>ReactApp: Soumet formulaire de création d'événement
    ReactApp->>SupaDB: createEvent(eventData)
    SupaDB-->>ReactApp: Données événement créé
    ReactApp->>SupaDB: generateInviteLink(eventId)
    SupaDB-->>ReactApp: Lien d'invitation
    ReactApp-->>Client: Affiche le lien à partager
    
    %% Flux 2: Soumission d'une vidéo
    Participant->>ReactApp: Accède au lien d'invitation
    ReactApp->>SupaDB: getEvent(eventId)
    SupaDB-->>ReactApp: Données événement
    ReactApp-->>Participant: Affiche page soumission
    
    alt Enregistrement vidéo
        Participant->>ReactApp: Clique "Enregistrer"
        ReactApp->>MediaRec: Demande accès caméra
        MediaRec-->>Participant: Demande permission
        Participant-->>MediaRec: Accorde permission
        MediaRec->>ReactApp: Stream vidéo actif
        Participant->>ReactApp: Commence enregistrement
        ReactApp->>MediaRec: startRecording()
        Participant->>ReactApp: Arrête enregistrement
        ReactApp->>MediaRec: stopRecording()
        MediaRec-->>ReactApp: Blob vidéo
    else Upload vidéo existante
        Participant->>ReactApp: Sélectionne fichier vidéo
        ReactApp->>ReactApp: validateVideoFormat(file)
    end
    
    ReactApp->>ReactApp: compressVideo(videoBlob)
    ReactApp->>SupaStorage: uploadVideo(videoBlob)
    SupaStorage-->>ReactApp: URL stockage
    ReactApp->>SupaDB: createVideo(eventId, url, participantName)
    SupaDB-->>ReactApp: Confirmation
    ReactApp->>SupaDB: createNotification(eventId, "Nouvelle vidéo")
    SupaDB-->>Organizer: Notification temps réel
    ReactApp-->>Participant: Confirmation soumission
    
    %% Flux 3: Génération du montage
    alt Déclenchement automatique
        System->>SupaDB: checkEventCompletion(eventId)
        SupaDB-->>System: Toutes vidéos reçues ou deadline atteinte
    else Déclenchement manuel
        Organizer->>SupaDB: triggerMontage(eventId)
    end
    
    SupaDB->>EdgeFunc: initiateVideoProcessing(eventId)
    EdgeFunc->>SupaDB: getEventVideos(eventId)
    SupaDB-->>EdgeFunc: Liste videos
    EdgeFunc->>SupaStorage: getVideosUrls(videoIds)
    SupaStorage-->>EdgeFunc: URLs vidéos
    EdgeFunc->>FFmpegAPI: createMontage(videoUrls, params)
    FFmpegAPI-->>EdgeFunc: URL vidéo montée
    EdgeFunc->>SupaStorage: downloadFinalVideo(url)
    EdgeFunc->>SupaStorage: uploadFinalVideo(videoBlob)
    SupaStorage-->>EdgeFunc: finalVideoUrl
    EdgeFunc->>SupaDB: updateEvent(eventId, {status: 'done', final_video_path})
    EdgeFunc->>SupaDB: createNotification(eventId, "Montage terminé")
    SupaDB-->>Organizer: Notification temps réel
    
    %% Flux 4: Accès à la vidéo finale
    Organizer->>ReactApp: Accède à /final/:eventId
    ReactApp->>SupaAuth: Vérifie authentification
    SupaAuth-->>ReactApp: Session utilisateur
    ReactApp->>SupaDB: getEvent(eventId)
    SupaDB-->>ReactApp: Données événement
    ReactApp->>ReactApp: Vérifie si user_id == event.user_id
    ReactApp->>SupaDB: getFinalVideo(eventId)
    SupaDB-->>ReactApp: final_video_path
    ReactApp->>SupaStorage: getSignedUrl(final_video_path)
    SupaStorage-->>ReactApp: URL temporaire signée
    ReactApp-->>Organizer: Affiche vidéo avec options téléchargement/partage
